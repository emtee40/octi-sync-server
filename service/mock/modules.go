// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jakob-moeller-cloud/octi-sync-server/service (interfaces: Modules)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	service "github.com/jakob-moeller-cloud/octi-sync-server/service"
)

// MockModules is a mock of Modules interface.
type MockModules struct {
	ctrl     *gomock.Controller
	recorder *MockModulesMockRecorder
}

// MockModulesMockRecorder is the mock recorder for MockModules.
type MockModulesMockRecorder struct {
	mock *MockModules
}

// NewMockModules creates a new mock instance.
func NewMockModules(ctrl *gomock.Controller) *MockModules {
	mock := &MockModules{ctrl: ctrl}
	mock.recorder = &MockModulesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModules) EXPECT() *MockModulesMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockModules) Get(arg0 context.Context, arg1 string) (service.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(service.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockModulesMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockModules)(nil).Get), arg0, arg1)
}

// HealthCheck mocks base method.
func (m *MockModules) HealthCheck() service.HealthCheck {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(service.HealthCheck)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockModulesMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockModules)(nil).HealthCheck))
}

// Set mocks base method.
func (m *MockModules) Set(arg0 context.Context, arg1 string, arg2 service.Module) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockModulesMockRecorder) Set(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockModules)(nil).Set), arg0, arg1, arg2)
}
